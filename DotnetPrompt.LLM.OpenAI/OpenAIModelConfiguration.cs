using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace DotnetPrompt.LLM.OpenAI;

public record OpenAIModelConfiguration
{
    /// <summary>
    /// Default model configuration
    /// </summary>
    public static OpenAIModelConfiguration Default = new()
    {
        Model = "text-davinci-003",
        Temperature = 0.7f,
        MaxTokens = 256,
        NucleusSamplingFactor = 1,
        FrequencyPenalty = 0,
        PresencePenalty = 0,
        SnippetCount = 1,
        GenerationSampleCount = 1,
    };

    /// <summary>
    /// An alternative to sampling with temperature, called nucleus sampling, where the
    /// model considers the results of the tokens with top_p probability mass. So 0.1
    /// means only the tokens comprising the top 10% probability mass are
    /// considered.
    /// We generally recommend using this or `temperature` but not
    /// both.
    /// Minimum of 0 and maximum of 1 allowed.
    /// </summary>
    [JsonPropertyName("top_p")]
    public float? NucleusSamplingFactor { get; init; }

    /// <summary>
    /// How many snippets to generate for each prompt. Minimum of 1 and maximum of 128
    /// allowed.
    /// </summary>
    [JsonPropertyName("n")]
    public int SnippetCount { get; init; }
    /// <summary>
    /// Include the log probabilities on the `logprobs` most likely tokens, as well the
    /// chosen tokens. So for example, if `logprobs` is 10, the API will return a list
    /// of the 10 most likely tokens. If `logprobs` is 0, only the chosen tokens will
    /// have logprobs returned. Minimum of 0 and maximum of 100 allowed.
    /// </summary>
    [JsonPropertyName("logprobs")]
    public int? LogProbability { get; init; }

    /// <summary>
    /// How many generations to create server side, and display only the best. Will not
    /// stream intermediate progress if best_of &gt; 1. Has maximum value of 128.
    /// </summary>
    [JsonPropertyName("best_of")]
    public int? GenerationSampleCount { get; init; }

    /// <summary>
    /// An optional prompt to complete from, encoded as a string, a list of strings, or
    /// a list of token lists. Defaults to &lt;|endoftext|&gt;. The prompt to complete from.
    /// If you would like to provide multiple prompts, use the POST variant of this
    /// method. Note that &lt;|endoftext|&gt; is the document separator that the model sees
    /// during training, so if a prompt is not specified the model will generate as if
    /// from the beginning of a new document. Maximum allowed size of string list is
    /// 2048.
    /// </summary>
    [JsonPropertyName("prompt")]
    public IList<string> Prompt { get; init; } = new List<string>();

    /// <summary> The maximum number of tokens to generate. Has minimum of 0. </summary>
    /// <remarks>Could be set to -1 if there a single prompt to return as many tokens as possible given the prompt and the models maximal context size.</remarks>
    [JsonPropertyName("max_tokens")]
    public int? MaxTokens { get; set; }
    /// <summary>
    /// What sampling temperature to use. Higher values means the model will take more
    /// risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones
    /// with a well-defined answer.
    /// We generally recommend using this or `top_p` but
    /// not both.
    /// Minimum of 0 and maximum of 2 allowed.
    /// </summary>
    [JsonPropertyName("temperature")]
    public float? Temperature { get; init; }

    /// <summary>
    /// Defaults to null. Modify the likelihood of specified tokens appearing in the
    /// completion. Accepts a json object that maps tokens (specified by their token ID
    /// in the GPT tokenizer) to an associated bias value from -100 to 100. You can use
    /// this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to
    /// token IDs. Mathematically, the bias is added to the logits generated by the
    /// model prior to sampling. The exact effect will vary per model, but values
    /// between -1 and 1 should decrease or increase likelihood of selection; values
    /// like -100 or 100 should result in a ban or exclusive selection of the relevant
    /// token. As an example, you can pass {"50256" &amp;#58; -100} to prevent the
    /// &lt;|endoftext|&gt; token from being generated.
    /// </summary>
    [JsonPropertyName("logit_bias")]
    public IDictionary<string, int> LogitBias { get; init; }

    /// <summary> The ID of the end-user, for use in tracking and rate-limiting. </summary>
    [JsonPropertyName("user")]
    public string User { get; init; }

    /// <summary> The name of the model to use. </summary>
    [JsonPropertyName("model")]
    public string Model { get; init; }

    /// <summary> Echo back the prompt in addition to the completion. </summary>
    [JsonPropertyName("echo")]
    public bool? Echo { get; init; }

    /// <summary> A sequence which indicates the end of the current document. </summary>
    [JsonPropertyName("stop")]
    public IList<string> Stop { get; set; }

    /// <summary> Completion configuration. </summary>
    [JsonPropertyName("completion_config")]
    public string CompletionConfig { get; init; }

    /// <summary>
    /// can be used to disable any server-side caching, 0=no cache, 1=prompt prefix
    /// enabled, 2=full cache
    /// </summary>
    [JsonPropertyName("cache_level")]
    public int? CacheLevel { get; init; }

    /// <summary>
    /// How much to penalize new tokens based on their existing frequency in the text
    /// so far. Decreases the model's likelihood to repeat the same line verbatim. Has
    /// minimum of -2 and maximum of 2.
    /// </summary>
    [JsonPropertyName("presence_penalty")]
    public float? PresencePenalty { get; init; }

    /// <summary>
    /// How much to penalize new tokens based on whether they appear in the text so
    /// far. Increases the model's likelihood to talk about new topics.
    /// </summary>
    [JsonPropertyName("frequency_penalty")]
    public float? FrequencyPenalty { get; init; }
}